#pragma kernel DisplaceVertices
#pragma kernel CalculateNormals

#include "WorldGeneration.hlsl"

// Input Mesh
RWStructuredBuffer<int> _SourceTriangles;
RWStructuredBuffer<float3> _SourceVertices;
RWStructuredBuffer<float3> _OutputVertices;
RWStructuredBuffer<int3> _SourceNormals;

// Variables set by the renderer
float3 _Offset;

// Vertex displacement compute shader
[numthreads(64,1,1)]
void DisplaceVertices(uint3 id : SV_DispatchThreadID) {
    if (id.x >= _SourceVertices.Length) { return; }

    // Get the vertex in world space
    float3 vertex = _SourceVertices[id.x] + _Offset;
    
    // Calculate the height for vertex and update the position in world space
    _OutputVertices[id.x] = float3(vertex.x, SampleHeight(vertex.x, vertex.z), vertex.z);

    // Reset the normal
    _SourceNormals[id.x] = int3(0, 0, 0);
}

// Normal calculation compute shader (un-normalized)
[numthreads(64,1,1)]
void CalculateNormals(uint3 id : SV_DispatchThreadID) {
    if (id.x >= _SourceTriangles.Length / 3) { return; }
    
    // Get the vertices
    float3 v0 = _SourceVertices[_SourceTriangles[id.x * 3 + 0]];
    float3 v1 = _SourceVertices[_SourceTriangles[id.x * 3 + 1]];
    float3 v2 = _SourceVertices[_SourceTriangles[id.x * 3 + 2]];

    // Calculate the normal (100 * normal to increase the precision)
    float3 normal = cross(v1 - v0, v2 - v0) * 100;

    // Add the normal to the vertices (results in un-normalized normals)
    InterlockedAdd(_SourceNormals[_SourceTriangles[id.x * 3 + 0]].x, int(normal.x));
    InterlockedAdd(_SourceNormals[_SourceTriangles[id.x * 3 + 0]].y, int(normal.y));
    InterlockedAdd(_SourceNormals[_SourceTriangles[id.x * 3 + 0]].z, int(normal.z));

    InterlockedAdd(_SourceNormals[_SourceTriangles[id.x * 3 + 1]].x, int(normal.x));
    InterlockedAdd(_SourceNormals[_SourceTriangles[id.x * 3 + 1]].y, int(normal.y));
    InterlockedAdd(_SourceNormals[_SourceTriangles[id.x * 3 + 1]].z, int(normal.z));

    InterlockedAdd(_SourceNormals[_SourceTriangles[id.x * 3 + 2]].x, int(normal.x));
    InterlockedAdd(_SourceNormals[_SourceTriangles[id.x * 3 + 2]].y, int(normal.y));
    InterlockedAdd(_SourceNormals[_SourceTriangles[id.x * 3 + 2]].z, int(normal.z));
}
